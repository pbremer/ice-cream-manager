<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location"
			value="classpath:batch/input-file-descriptor.properties" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

	<bean class="org.springframework.batch.core.scope.StepScope" />

	<bean id="customEditorConfigurer"
		class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="customEditors">
			<map>
				<entry key="org.springframework.batch.item.file.transform.Range[]"
					value="org.springframework.batch.item.file.transform.RangeArrayPropertyEditor" />
			</map>
		</property>
	</bean>

	<!-- <batch:job id="processInputFile"> <batch:step id="getFile"> <batch:tasklet 
		throttle-limit="1"> <batch:chunk reader="" writer="" commit-interval="1"/> 
		</batch:tasklet> </batch:step> </batch:job> -->

	<!-- <bean id="processInputFileReader" class="" /> -->

	<!-- <bean id="processFileStepListener" class="io.github.pbremer.icecreammanager.batch.listener.ProcessFileStepListener" 
		/> -->

	<bean id="inputFileHeaderAndTrailerItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.InputFileHeaderAndTrailerItemReader"
		scope="step">
		<property name="countableRowRegex"
			value="#{jobParameters['input.file.countablerow.regex]}" />
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="org.springframework.batch.item.file.transform.PatternMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="HD*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.trailer.names}" />
												<property name="columns" value="${inputfile.trailer.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
										<entry key="T*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.trailer.names}" />
												<property name="columns" value="${inputfile.trailer.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
										<entry key="*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="columns" value="${inputfile.process.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="cityItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.CityInputFileReader"
		scope="step">
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="linesToSkip" value="1" />
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="io.github.pbremer.icecreammanager.batch.item.file.transform.RegexMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="^(?!T\s)(?!HD\s).*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.city.names}" />
												<property name="columns" value="${inputfile.city.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="routeItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.RouteInputFileReader"
		scope="step">
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="io.github.pbremer.icecreammanager.batch.item.file.transform.RegexMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="^[ACD].*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.route.names}" />
												<property name="columns" value="${inputfile.route.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="truckItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.TruckInputFileReader"
		scope="step">
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="linesToSkip" value="1" />
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="io.github.pbremer.icecreammanager.batch.item.file.transform.RegexMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="^(?!T\s)(?!HD\s).*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.truck.names}" />
												<property name="columns" value="${inputfile.truck.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="truckRouteItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.TruckRouteInputFileReader"
		scope="step">
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="linesToSkip" value="1" />
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="io.github.pbremer.icecreammanager.batch.item.file.transform.RegexMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="^(?!T\s)(?!HD\s).*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.truckroute.names}" />
												<property name="columns" value="${inputfile.truckroute.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="loadTruckItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.LoadTruckInputFileReader"
		scope="step">
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="org.springframework.batch.item.file.transform.PatternMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="TR*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names"
													value="${inputfile.loadtruck.truckrow.names}" />
												<property name="columns"
													value="${inputfile.loadtruck.truckrow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
										<entry key="IR*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names"
													value="${inputfile.loadtruck.adjustmentrow.names}" />
												<property name="columns"
													value="${inputfile.loadtruck.adjustmentrow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
										<entry key="*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names"
													value="${inputfile.loadtruck.inventoryrow.names}" />
												<property name="columns"
													value="${inputfile.loadtruck.inventoryrow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="truckSalesItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.TruckSalesInputFileReader"
		scope="step">
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="org.springframework.batch.item.file.transform.PatternMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="TR*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names"
													value="${inputfile.trucksales.truckrow.names}" />
												<property name="columns"
													value="${inputfile.trucksales.truckrow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
										<entry key="SR*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names"
													value="${inputfile.trucksales.salesrow.names}" />
												<property name="columns"
													value="${inputfile.trucksales.salesrow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
										<entry key="*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names"
													value="${inputfile.trucksales.inventoryrow.names}" />
												<property name="columns"
													value="${inputfile.trucksales.inventoryrow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="inventoryItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.LoadInventoryInputFileReader"
		scope="step">
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="linesToSkip" value="1" />
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="io.github.pbremer.icecreammanager.batch.item.file.transform.RegexMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="^(?!T\s)(?!HD\s).*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.inventory.names}" />
												<property name="columns" value="${inputfile.inventory.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="driverItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.DriverInputFileReader"
		scope="step">
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="linesToSkip" value="1" />
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="io.github.pbremer.icecreammanager.batch.item.file.transform.RegexMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="^(?!T\s)(?!HD\s).*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.driver.names}" />
												<property name="columns" value="${inputfile.driver.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="driverTruckItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.DriverTruckInputFileReader"
		scope="step">
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="linesToSkip" value="1" />
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="io.github.pbremer.icecreammanager.batch.item.file.transform.RegexMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="^(?!T\s)(?!HD\s).*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.drivertruck.names}" />
												<property name="columns" value="${inputfile.drivertruck.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="routePriceItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.RoutePriceInputFileReader"
		scope="step">
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="org.springframework.batch.item.file.transform.PatternMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="R*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names"
													value="${inputfile.routeprice.routerow.names}" />
												<property name="columns"
													value="${inputfile.routeprice.routerow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
										<entry key="C*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names"
													value="${inputfile.routeprice.itemrow.names}" />
												<property name="columns"
													value="${inputfile.routeprice.itemrow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
										<entry key="*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names"
													value="${inputfile.routeprice.countrow.names}" />
												<property name="columns"
													value="${inputfile.routeprice.countrow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="costsItemReader"
		class="io.github.pbremer.icecreammanager.batch.reader.CostsInputFileReader"
		scope="step">
		<property name="delegate">
			<bean class="org.springframework.batch.item.file.FlatFileItemReader">
				<property name="resource" value="#{jobParameters['input.file.name']}" />
				<property name="lineMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
						<property name="fieldSetMapper">
							<bean
								class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
						</property>
						<property name="lineTokenizer">
							<bean
								class="org.springframework.batch.item.file.transform.PatternMatchingCompositeLineTokenizer">
								<property name="tokenizers">
									<map>
										<entry key="R*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.costs.truckrow.names}" />
												<property name="columns"
													value="${inputfile.costs.truckrow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
										<entry key="C*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.costs.itemrow.names}" />
												<property name="columns" value="${inputfile.costs.itemrow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
										<entry key="*">
											<bean
												class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
												<property name="names" value="${inputfile.costs.countrow.names}" />
												<property name="columns"
													value="${inputfile.costs.countrow.columns}" />
												<property name="strict" value="false" />
											</bean>
										</entry>
									</map>
								</property>
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="parseInputFileReader"
		class="io.github.pbremer.icecreammanager.batch.FileNameMatchingCompositeItemReader"
		scope="step">
		<property name="resource" value="#{jobParameters['input.file.name']}" />
		<property name="delegates">
			<map>
				<entry key="${inputfile.city.filename}" value-ref="cityItemReader" />
				<entry key="${inputfile.route.filename}" value-ref="routeItemReader" />
				<entry key="${inputfile.truck.filename}" value-ref="truckItemReader" />
				<entry key="${inputfile.truckroute.filename}" value-ref="truckRouteItemReader" />
				<entry key="${inputfile.loadtruck.filename}" value-ref="loadTruckItemReader" />
				<entry key="${inputfile.trucksales.filename}" value-ref="truckSalesItemReader" />
				<entry key="${inputfile.inventory.filename}" value-ref="inventoryItemReader" />
				<entry key="${inputfile.driver.filename}" value-ref="driverItemReader" />
				<entry key="${inputfile.routeprice.filename}" value-ref="routePriceItemReader" />
				<entry key="${inputfile.costs.filename}" value-ref="costsItemReader" />
				<entry key="${inputfile.drivertruck.filename}" value-ref="driverTruckItemReader" />
			</map>
		</property>
	</bean>

	<bean id="trailerCountValidator"
		class="org.springframework.batch.item.validator.ValidatingItemProcessor">
		<property name="validator">
			<bean class="org.springframework.batch.item.validator.SpringValidator">
				<property name="validator">
					<bean
						class="io.github.pbremer.icecreammanager.validator.TrailerValidator" />
				</property>
			</bean>
		</property>
	</bean>
	<!-- <batch:job id="processInputFiles"> <batch:step id="verifyFile"> <batch:tasklet 
		throttle-limit="1"> <batch:chunk reader="" processor="" writer="" /> </batch:tasklet> 
		<batch:next on="COMPLETED" to="parseInputFile" /> <batch:fail on="*" /> </batch:step> 
		<batch:step id="parseInputFile"> <batch:tasklet throttle-limit="1"> <batch:chunk 
		reader="parseInputFileReader" processor="" writer="" /> </batch:tasklet> 
		</batch:step> </batch:job> -->
	<bean id="cityConverterProcessor"
		class="io.github.pbremer.icecreammanager.batch.processor.TransformingItemProcessor">
		<property name="converter">
			<bean class="io.github.pbremer.icecreammanager.convert.CityConverter" />
		</property>
	</bean>

	<bean id="cityWriter"
		class="org.springframework.batch.item.data.RepositoryItemWriter">
		<property name="repository" ref="cityRepository" />
		<property name="methodName" value="save" />
	</bean>

	<bean id="itemWriter"
		class="io.github.pbremer.icecreammanager.batch.FileNameMatchingCompositeItemWriter"
		scope="step">
		<property name="delegates">
			<map>
				<entry key="${inputfile.city.filename}" value-ref="cityWriter" />
				<!-- <entry key="${inputfile.route.filename}" value-ref="routeItemReader" 
					/> <entry key="${inputfile.truck.filename}" value-ref="truckItemReader" /> 
					<entry key="${inputfile.truckroute.filename}" value-ref="truckRouteItemReader" 
					/> <entry key="${inputfile.loadtruck.filename}" value-ref="loadTruckItemReader" 
					/> <entry key="${inputfile.trucksales.filename}" value-ref="truckSalesItemReader" 
					/> <entry key="${inputfile.inventory.filename}" value-ref="inventoryItemReader" 
					/> <entry key="${inputfile.driver.filename}" value-ref="driverItemReader" 
					/> <entry key="${inputfile.routeprice.filename}" value-ref="routePriceItemReader" 
					/> <entry key="${inputfile.costs.filename}" value-ref="costsItemReader" /> 
					<entry key="${inputfile.drivertruck.filename}" value-ref="driverTruckItemReader" 
					/> -->
			</map>
		</property>
	</bean>

	<batch:job id="processInputFiles">
		<batch:step id="parseInputFile">
			<batch:tasklet throttle-limit="1">
				<batch:chunk commit-interval="10" reader="parseInputFileReader"
					processor="cityConverterProcessor" writer="itemWriter" />
				<batch:listeners>
					<batch:listener ref="parseInputFileReader" />
				</batch:listeners>
			</batch:tasklet>
		</batch:step>
	</batch:job>
</beans>
